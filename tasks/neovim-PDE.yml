# Tasks to install neovim with my IDE-like configuration
---

- name: "neovim-PDE | Latest PDE apt packages installed."
  ansible.builtin.apt:
    name: "{{ item }}"
    state: "{{ neovim_apt_state }}"
  with_items: "{{ neovim_apt_packages }}"
  when:
    - neovim_apt_packages | length > 0
    - ansible_os_family == "Debian"

- name: "neovim-PDE | Pip3 Installed for pip packages."
  ansible.builtin.apt:
    name:
      - python3-pip
      - pipx
    state: "{{ neovim_pip3_packager_state }}"
  when:
    - neovim_pip_packages | length > 0
    - ansible_os_family == "Debian"

- name: "neovim-PDE | Latest PDE pip packages installed."
  become_user: "{{ primary_user }}"
  community.general.pipx:
    name: "{{ item }}"
    state: latest
  with_items: "{{ neovim_pip_packages }}"
  when: neovim_pip_packages | length > 0

- name: "neovim-PDE | Ensure npm installed from repository."
  ansible.builtin.apt:
    name: npm
    state: "{{ neovim_npm_packager_state }}"
  when:
    - neovim_npm_packages | length > 0
    - ansible_os_family == "Debian"

- name: "neovim-PDE | Ensure latest npm packages are installed."
  community.general.npm:
    name: "{{ item }}"
    global: true
    state: latest
  with_items: "{{ neovim_npm_packages }}"
  when: neovim_npm_packages | length > 0

#                                  .o88o.  o8o
#                                  888 `"  `"'
#  .ooooo.   .ooooo.  ooo. .oo.   o888oo  oooo   .oooooooo  .oooo.o
# d88' `"Y8 d88' `88b `888P"Y88b   888    `888  888' `88b  d88(  "8
# 888       888   888  888   888   888     888  888   888  `"Y88b.
# 888   .o8 888   888  888   888   888     888  `88bod8P'  o.  )88b
# `Y8bod8P' `Y8bod8P' o888o o888o o888o   o888o `8oooooo.  8""888P'
#  CONFIG -- confi$%-- rsync -- synchronize     d"     YD
#                                               "Y88888P'

- name: "neovim-PDE | Required configuration directories exist."
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ primary_user }}"
    group: "{{ primary_user }}"
    mode: '0755'
  with_items: "{{ neovim_config_dirs }}"
  when: neovim_config_dirs | length > 0

- name: neovim-PDE | Ensure various configurations are in place.
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ primary_user }}"
    group: "{{ primary_user }}"
    mode: '0644'
  loop: "{{ neovim_external_config }}"
  when: neovim_external_config | length > 0

- name: "neovim-PDE | Rsync installed to syncronize nvim configs."
  ansible.builtin.apt:
    name: rsync
    state: present
  when:
    - neovim_config_syncs | length > 0
    - ansible_os_family == "Debian"

- name: neovim-PDE | Neovim configuration synchronized and up-to-date.
  ansible.posix.synchronize:
    # https://docs.ansible.com/ansible/latest/collections/ansible/posix/synchronize_module.html
    # Synchronize files and folders to remote machines (uses rsync)
    #   paths ending in `/` are directories, otherwise will sync files
    #   add and remove whatever part of your config needs synchronization
    src: "~/.config/nvim/{{ item }}"
    dest: "/home/{{ primary_user }}/.config/nvim/{{ item }}"
    delete: true
  with_items: "{{ neovim_config_syncs }}"
  when: neovim_config_syncs | length > 0

...
# vim: foldlevel=1: filetype=yaml.ansible :
